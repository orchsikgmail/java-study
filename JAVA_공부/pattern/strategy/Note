### 스트래티지 패턴이란### 
	1) 행위를 클래스로 캡슐화해 동적으로 행위를 자유롭게 바꿀 수 있게 해주는 패턴
		ConsoleLogging / FileLogging 행위를 캡슐화함, 클라이언트는 가져다쓰면 됌
	2) 같은 문제를 해결하는 여러 알고리즘이 클래스별로 캡슐화되어 있고 이들이 필요할 때 교체할 수 있도록 함으로써
		동일한 문제를 다른 알고리즘으로 해결할 수 있게 하는 디자인 패턴 ‘행위(Behavioral) 패턴’의 하나
		즉, 전략을 쉽게 바꿀 수 있도록 해주는 디자인 패턴이다.
	3) 전략이란
		어떤 목적을 달성하기 위해 일을 수행하는 방식, 비즈니스 규칙, 문제를 해결하는 알고리즘 등
		특히 게임 프로그래밍에서 게임 캐릭터가 자신이 처한 상황에 따라 공격이나 행동하는 방식을 바꾸고 싶을 때 스트래티지 패턴은 매우 유용하다.

	$ 무엇보다 스트레티지 패턴의 장점은 실행하기 전까지 어떤 구현을 사용할지 결정을 미룰 수 있다는 점이다.
	$ Logging 사례에서, Logging 인터페이스를 사용해 로그 기록을 콘솔에 출력하는지 파일에 기록하는지 신경쓰지 않고 
		개발할수 있다.
		즉, Client클래스에서 특정 구현을 활용하지 않고 인터페이스를 활용해
		코드를 테스트할 때는 ConsoleLogging클래스를, 실제로 사용할 대는 FileLogging클래스를 사용할 수 있도록 한 것.