<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:util="http://www.springframework.org/schema/util"
	xmlns:task="http://www.springframework.org/schema/task"
	xmlns:websocket="http://www.springframework.org/schema/websocket"
	xmlns:security="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-4.2.xsd
		http://www.springframework.org/schema/websocket http://www.springframework.org/schema/websocket/spring-websocket.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd">

	<!-- 두개 이상의 핸들러매핑이 등록된 경우 디폴트 전략이 무산되므로 DefaultAnnotaionHandlerMapping이 자동 등록되도록 설정해주자 -->
    <mvc:annotation-driven />

    <!-- 
    	/ 매핑에서 정적 리소스(html, css, js, jpg 등)를 처리할수있도록 설정
    	web.xml에서 dispatcherServlet의 url-pattern을 tomcat의 server.xml 기본설정  pattern인  
    	/ 과 동일하게 설정해서 defaultServelet이 무시되고 있다. pattern을 /로 주는 이유는 rest방식 적용하려고
    	따라서 defaultServlet이  처리하지 못하는 url을 defaultServlet이 처리하게 하는 설정.
     --> 
	<mvc:default-servlet-handler/>

	<!-- 
		해당 경로를 포함한 모든 하위 경로에 적용,
		어노테이션을 명시한 자바 파일들이 
		Bean으로 등록되어 사용 가능해진다.
	 -->
	<context:component-scan base-package="com.sp" />


    <!-- 트랜잭션 처리가 안되는 경우 mvc-config.xml 에 다음을 추가  -->
    <aop:config proxy-target-class="true">
	   <aop:pointcut id="controllerOperation" expression="execution(public * com.sp..*Controller.*(..))" />
   </aop:config>

	<!-- 타일즈 환경 설정 -->
    <bean id="tilesConfigurer" class="org.springframework.web.servlet.view.tiles3.TilesConfigurer">
       <property name="definitions">
           <list>
               <value>/WEB-INF/tiles-defs.xml</value>
           </list>
       </property>
    </bean>
     
	<bean id="tilesViewResolver" class="org.springframework.web.servlet.view.UrlBasedViewResolver">
		<property name="order" value="1" />
		<property name="viewClass" value="org.springframework.web.servlet.view.tiles3.TilesView" />
		<property name="viewNames" value=".*" />
	</bean>	
	<bean id="viewResolver2" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="order" value="2" />
		<property name="viewClass" value="org.springframework.web.servlet.view.JstlView" />
		<property name="prefix" value="/WEB-INF/view/" />
		<property name="suffix" value=".jsp" />
	</bean>
	
	<!-- 파일 업로드 -->
    <bean id="multipartResolver"  class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
         <!-- 자바파일이 UTF-8로 저장된 경우 한글파일명이 깨지지 않게하기 위해 -->
         <property name="defaultEncoding" value="utf-8"/>
         <property name="maxUploadSize" value="10485760" />
    </bean>

	<!-- @Secured, @PreAuthorize, @PostAuthorize 어노테이션등 시큐리티 어노테이션 -->
    <security:global-method-security proxy-target-class="true"
          secured-annotations="enabled"
          jsr250-annotations="enabled"
          pre-post-annotations="enabled"/>
          
          
	<!-- 예외처리 -->
	<!--     
    <bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerExceptionResolver">
        <property name="order" value="1" />
     </bean>
 	-->
    
    <!-- 
        @Secured, @PreAuthorize, @PostAuthorize 어노테이션을 정의한 경우 권한이 없거나(AccessDeniedException)
          로그인이 되지 않은 경우 403 에러가 발생하여 로그인 폼이나 권한이 없는 곳으로 넘어 가지 않고 아래 설정 에러페이지가 표시된다.
          따라서 접근 권한이 없는 경우 @Secured Annotation은 access-denied-page 대신 다음 처럼 예외처리로 처리 할수 있지만
         로그인이 되지 않은 상태도 동일하게 적용 된다.
       <prop key="org.springframework.security.access.AccessDeniedException">.member.noAuthorized</prop>
       @PostAuthorize 어노테이션을 이용하면 메소드 실행후 적용되는 메소드이므로 로그인 처리는 시큐리티 환경설정에서 처리하고
       수정등에서 글을 등록한 사람만 수정가능하도록 설정 가능하다.
     -->
     
     
     <!-- 
    <bean id="exceptionResolver"
               class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
        <property name="order" value="1" />
        <property name="exceptionMappings">
            <props>
                <prop key="org.springframework.web.multipart.MaxUploadSizeExceededException">.error.fileuploadFailure</prop>
                <prop key="org.springframework.dao.DataAccessException">.error.dataAccessFailure</prop>
				<prop key="org.springframework.security.access.AccessDeniedException">.member.noAuthorized</prop>                
				<prop key="java.lang.Exception">.error.error</prop>
            </props>
        </property>
        <property name="defaultErrorView" value=".error.error"/>
    </bean>
  -->
 
 
 
</beans>
