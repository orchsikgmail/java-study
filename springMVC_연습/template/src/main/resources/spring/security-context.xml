<?xml version="1.0" encoding="UTF-8"?>  
<beans:beans xmlns="http://www.springframework.org/schema/security"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context
		http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/security
		http://www.springframework.org/schema/security/spring-security.xsd">
		
	<context:component-scan base-package="com.sp"/>
	
	<!-- 
		auto-config : 로그인페이지, http기본인증, 로그아웃 기능 제공
		pattern : 해당 스프링 시큐리티 설정을 적용시킬 url패턴
	-->
	<http auto-config="true">
		<!-- 폼기반 인증방법 사용
		always-use-default-target : 로그인후 default-taraget-url 이동 확실히 처리
		 -->
		<form-login
			login-page="/member/login"
			login-processing-url="/member/loginSubmit"
			username-parameter="id"
			password-parameter="pwd"
			authentication-failure-url="/member/login?login_error"
			default-target-url="/"
			always-use-default-target="false"
			authentication-success-handler-ref="loginSuccessHandler"
		/>
		
		<!-- 로그아웃시 세션 초기화 -->
		<logout
			invalidate-session="true"
			logout-url="/member/logout"
			logout-success-url="/"
		/>
		
		<!-- 권한없을때, 유효기간 지났을때 -->
		<access-denied-handler error-page="/member/noAuthorized"/>
		<session-management>
			<concurrency-control max-sessions="1" expired-url="/member/expired"/>
		</session-management>
		
		<!-- 허가없이 가는 곳  -->
		<intercept-url pattern="/**" access="permitAll"/>
		
		<intercept-url pattern="/index.jsp" access="permitAll"/>
		<intercept-url pattern="/main" access="permitAll"/>
		
		<intercept-url pattern="/member/member" access="permitAll"/>
		<intercept-url pattern="/member/userIdCheck" access="permitAll"/>
		<intercept-url pattern="/member/login" access="permitAll"/>
		
		<intercept-url pattern="/resource/**" access="permitAll"/>
		<intercept-url pattern="/styles/**" access="permitAll"/>
		
		<intercept-url pattern="/uploads/**" access="permitAll"/>

		<!-- 권한 설정 : 위 쪽이 우선적용 되므로 와일드카드가 많을 수록 하단 기술 -->
		<intercept-url pattern="/admin/**" access="hasRole('ROLE_ADMIN')"/>
		<!-- <intercept-url pattern="/**" access="hasAnyRole('ROLE_ADMIN','ROLE_USER')"/> -->
		
		<!-- AJAX 로그인 여부 확인 필터 등록 -->
		<custom-filter ref="ajaxFilter" after="EXCEPTION_TRANSLATION_FILTER"/>
		
		<!-- 
		csrf를 통한 해킹을 막는다. 
		spring 4.x때 추가된 옵션으로 ssl을 사용하지 않을 경우 csrf는 disalbed=true로 설정.
		http + ssl보안인증 ==> https
		SSL 인증서는 클라이언트와 서버간의 통신을 제3자가 보증해주는 전자화된 문서다. 
		클라이언트가 서버에 접속한 직후에 서버는 클라이언트에게 이 인증서 정보를 전달한다. 
		클라이언트는 이 인증서 정보가 신뢰할 수 있는 것인지를 검증 한 후에 다음 절차를 수행하게 된다.
		-->
		<csrf disabled="true"/>
	</http>
	 
	 
	<!-- 로그인 처리  클래스 -->
	<beans:bean id="loginSuccessHandler" class="com.sp.security.LoginSuccessHandler" />
	
	<!-- 필터 객체 생성 -->
	<beans:bean id="ajaxFilter" class="com.sp.security.AjaxFilter">
		<beans:property name="ajaxHeader" value="AJAX"/>
	</beans:bean>
	
	<!-- dataBase에서 로그인처리에 필요한 정보 호출 -->
	<jdbc-user-service data-source-ref="dataSource" 
		id="userService" 
		users-by-username-query="SELECT id userName, pwd password, enabled FROM member WHERE id = ?"
		authorities-by-username-query="SELECT id userName, authority FROM memberAuthority WHERE id = ?"
	/>
	
	<!-- 암호화 -->
	<authentication-manager>
		<authentication-provider user-service-ref="userService">
			<password-encoder ref="bcryptEncoder"/>
		</authentication-provider>
	</authentication-manager>
	
	<!-- 사용할 암호화 클래스 -->
	<beans:bean
		id= "bcryptEncoder"
		class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"
	/>
</beans:beans>