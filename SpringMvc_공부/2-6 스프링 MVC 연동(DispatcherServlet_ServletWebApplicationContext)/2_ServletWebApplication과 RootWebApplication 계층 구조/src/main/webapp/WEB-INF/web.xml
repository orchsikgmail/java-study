<!DOCTYPE web-app PUBLIC
 "-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN"
 "http://java.sun.com/dtd/web-app_2_3.dtd" >

<web-app>
	<display-name>Archetype Created Web Application</display-name>

	<!-- 
		ContextLoaderListener가 
		contextConfigLocation 즉, AppConfig를 가지고 
		AnnotationConfigWebApplicationContext를 만든다. => root WebApplicaionContext
		AppConfig에 @ComponentScan 사용했기 때문에 @Service 사용한 HelloService를 꺼내서 사용 가능.
		Controller를 제외한 모든 클래스를 등록했다.
	 -->
	<context-param>
		<param-name>contextClass</param-name>
		<param-value>org.springframework.web.context.support.AnnotationConfigWebApplicationContext</param-value>
	</context-param>

	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>me.blackbell.AppConfig</param-value>
	</context-param>
	<!-- 스프링에서 제공하는 리스너(ContextLoaderListener)가 Spring IOC 컨테이너, 즉 ApplicationContext를 ServletApplication 
		생명주기에 맞춰 바인딩 해준다. ServletContext가 생성될 때 ApplicaionContext를 생성, 삭제 될 때는 삭제. 
		이게 정확히 서블릿 리스너가 할 수 있는 일이었다. ApplicationContext를 만든다는 말은 스프링 설정 파일이 필요하단 말. 
		Context-param태그를 통해 설정한다.
		## 참고) ContextLoaderListner가 생성하는 ApplicationContext는 Root WebApplicationContext로 분류한다.
		        DispatcherServlet이 생성하는 ApplicationContext는 Servlet WebApplicationContext로 분류한다.
		        Contorller는 Servlet WebAppicationContext에 등록이 되고, Service는 Root WebApplication에 등록이 된다.
	     		전자가 후자를 상속받아서 사용.
	-->
	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>






	<!-- 
		DispatcherServlet이
		contextConfigLocation 즉, WebConfig를 가지고 
		AnnotationConfigWebApplicationContext를 만든다. => Servlet WebApplicationContext
		WebConfig에 모든  Controller클래스를 등록했다.
	 -->
	<servlet>
		<servlet-name>app</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
			<init-param>
				<param-name>contextClass</param-name>
				<param-value>org.springframework.web.context.support.AnnotationConfigWebApplicationContext</param-value>
			</init-param>
			<init-param>
				<param-name>contextConfigLocation</param-name>
				<param-value>me.blackbell.WebConfig</param-value>
			</init-param>
	</servlet>
	
	<!-- /app 밑으로 시작하는 url을 app DispatcherServlet을 통해 처리하겠다. -->
	<servlet-mapping>
		<servlet-name>app</servlet-name>
		<url-pattern>/app/*</url-pattern>
	</servlet-mapping>




</web-app>


